# -*- coding: utf-8 -*-
"""IPnew.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vrkWG28_0JFNccwmTfF58Xl0BryPyUJy
"""

import streamlit as st
import pandas as pd
from sklearn.preprocessing import LabelEncoder, MinMaxScaler
from sklearn.neighbors import NearestNeighbors

# Load dataset
df = pd.read_csv("destinasi-wisata-indonesia.csv")

# Preprocessing
data = df.copy()
data = data[['Place_Name', 'Category', 'City', 'Price', 'Rating', 'Rating_Count', 'Time_Minutes']]
data['Time_Minutes'] = data['Time_Minutes'].fillna(data['Time_Minutes'].median())
data['Rating'] = data['Rating'] / 10.0  # Skala 0â€“5

# Encode kolom kategorikal
le_kategori = LabelEncoder()
le_lokasi = LabelEncoder()
data['Category'] = le_kategori.fit_transform(data['Category'])
data['City'] = le_lokasi.fit_transform(data['City'])

# Normalisasi fitur numerik
fitur = ['Category', 'City', 'Price', 'Rating', 'Rating_Count', 'Time_Minutes']
scaler = MinMaxScaler()
data_scaled_all = scaler.fit_transform(data[fitur])  # simpan versi semua data

# Streamlit UI
st.title("Sistem Rekomendasi Destinasi Wisata")

kategori_list = df['Category'].unique().tolist()
lokasi_list = df['City'].unique().tolist()

kategori_input = st.selectbox("Pilih Kategori", kategori_list)
lokasi_input = st.selectbox("Pilih Lokasi", lokasi_list)
harga_input = st.number_input("Harga Maksimal (Rp)", min_value=0, value=50000)
rating_input = st.slider("Rating Minimal", min_value=0.0, max_value=5.0, value=4.0, step=0.1)
jumlah_rating_input = st.number_input("Jumlah Rating Minimal", min_value=0, value=20)
waktu_input = st.slider("Estimasi Waktu Kunjungan (menit)", min_value=10.0, max_value=600.0, value=120.0, step=10.0)

# Pilih metode jarak
metric_option = st.selectbox("Pilih Metode Pengukuran Jarak", ['euclidean', 'manhattan', 'cosine'])

if st.button("Rekomendasikan"):
    # Encode input user
    kategori_encoded = le_kategori.transform([kategori_input])[0]
    lokasi_encoded = le_lokasi.transform([lokasi_input])[0]
    input_user = [[kategori_encoded, lokasi_encoded, harga_input, rating_input, jumlah_rating_input, waktu_input]]
    input_scaled = scaler.transform(input_user)

    # Filter data berdasarkan batas preferensi user
    filter_data = data[
        (df['Price'] <= harga_input) &
        (df['Rating'] >= rating_input) &
        (df['Rating_Count'] >= jumlah_rating_input)
    ]

    if filter_data.empty:
        st.warning("Tidak ada destinasi yang memenuhi kriteria filter Anda.")
    else:
        # Normalisasi ulang data yang sudah difilter
        data_filtered_scaled = scaler.transform(filter_data[fitur])

        # Latih KNN
        knn = NearestNeighbors(n_neighbors=5, metric=metric_option)
        knn.fit(data_filtered_scaled)

        # Cari rekomendasi
        distances, indices = knn.kneighbors(input_scaled)

        st.subheader(f"Rekomendasi Destinasi ({metric_option.title()} Distance):")
        for idx, dist in zip(indices[0], distances[0]):
            row = filter_data.iloc[idx]
            st.markdown(f"**{row['Place_Name']}**")
            st.markdown(f"- Kategori: {df.loc[row.name, 'Category']}")
            st.markdown(f"- Lokasi: {df.loc[row.name, 'City']}")
            st.markdown(f"- Harga: Rp{row['Price']:,}")
            st.markdown(f"- Rating: {row['Rating']:.1f}")
            st.markdown(f"- Jumlah Rating: {row['Rating_Count']}")
            st.markdown(f"- Estimasi Waktu: {row['Time_Minutes']} menit")
            st.markdown(f"- Skor Kemiripan (Jarak): `{dist:.4f}`")
            st.markdown("---")
